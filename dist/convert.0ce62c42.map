{"version":3,"sources":["convert.js"],"names":["findFirstPos","line","xs","pos","i","length","test","apos","indexOf","trans","croak","m","Error","isReg","par","toUpperCase","isRegM","isRegPair","isIndirect","trim","register","noIndirect","substr","regPair","conv","op","par1","par2","lop","toLowerCase","convline","label","remainder","s","console","log","cx","convert","txt","transTab","lines","split","map","join"],"mappings":"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","file":"convert.0ce62c42.map","sourceRoot":"..","sourcesContent":["\nvar findFirstPos = function(line,xs) {\n  var pos = -1;\n  for (var i=0;i<xs.length;i++) {\n    var test = xs[i]\n    var apos = line.indexOf(test);\n    if (apos<0) continue;\n    if (pos==-1) pos = apos;\n    if (apos<pos) pos = apos;\n  }\n  return pos;\n}\nvar trans;\nvar croak = function(m) {\n  throw new Error(\"Cannot convert \"+m)\n}\n\nvar isReg = function(par) {\n  return (\"ABCDEHL\".indexOf(par.toUpperCase()))<0?false:true\n}\nvar isRegM = function(par) {\n  if(par.toUpperCase()==\"(HL)\") return true;\n  return (\"ABCDEHL\".indexOf(par.toUpperCase()))<0?false:true\n}\nvar isRegPair = function(par) {\n  return ([\"BC\",\"DE\",\"HL\",\"SP\",\"AF\"].indexOf(par.toUpperCase()))<0?false:true\n}\nvar isIndirect = function(par) {\n  par = par.trim();\n  if(par[0]!=\"(\") return false;\n  if(par[par.length-1]==\")\") return true;\n  return false;\n}\n\nvar register = function(par) {\n  par = par.toUpperCase();\n  if (!isRegM(par)) croak (\"cannot determine register \" +par)\n  if(par==\"(HL)\") return \"M\";\n  return par\n}\n\nvar noIndirect = function(par) {\n  return par.substr(1,par.length-2)\n}\n\nvar regPair = function(par) {\n  par = par.toUpperCase();\n  if (!isRegPair(par)) croak (\"cannot determine register pair \" +par)\n  if(par==\"AF\") return \"PSW\"\n  if(par==\"SP\") return \"SP\"\n  return par[0];\n}\n\n\nvar conv = function(op,par1,par2) {\n\n  var lop = op.toLowerCase();\n  if (trans[lop]) {\n    return trans[lop](par1.trim(),par2.trim())\n  }\n\n  return[op,par1,par2];\n}\n\nvar convline = function(line) {\n  //parse line\n  var label=\"\", op=\"\", par1=\"\",par2=\"\",remainder=\"\";\n  var s;\n  if (line[0]!=\" \") {\n    if (line[0]==\";\") return line; //whole line is a remark\n    //label?\n    s = findFirstPos(line,[\" \",\":\",\"\\t\"])\n    label = line.substr(0,s).trim();\n    line = line.substr(s+1);\n  }\n  line = line.trim();\n  s = findFirstPos(line,[\" \",\":\",\"\\t\"])\n  op = line.substr(0,s);\n  line = line.substr(s+1).trim();\n\n  s = findFirstPos(line,[\",\",\";\"])\n  if(line[s]==\",\") {\n    //2 params\n    par1 = line.substr(0,s);\n    line = line.substr(s+1).trim();\n    s = findFirstPos(line,[\";\"])\n    if (s<0) {\n      par2 = line;\n      line=\"\";\n    } else {\n      par2 = line.substr(0,s);\n      line = line.substr(s+1).trim();\n    }\n  } else if(line[s]==\";\") {\n    //1 param\n    par1 = line.substr(0,s);\n    line = line.substr(s+1).trim();\n    par2=\"\";\n  } else if(s<0) {\n    //1 param, no remark\n    if (!op) {\n      op = line\n      par1=\"\"\n    } else {\n      par1 = line\n    }\n    par2=\"\";\n    line=\"\"\n  }\n\n  remainder = line\n  console.log(\"L\",label,\"O\",op,\"1\",par1,\"2\",par2,\"R\",remainder)\n  var cx = conv(op,par1,par2);\n  op = cx[0]\n  par1 = cx[1].trim()\n  par2 = cx[2].trim();\n\n\n  //hex fix\n  if (par1[0]==\"#\") par1 = \"$\"+par1.substr(1);\n  if (par2[0]==\"#\") par2 = \"$\"+par2.substr(1);\n  if (par2) par2 = \",\"+par2;\n\n  //console.log(\"L\",label,\"O\",op,\"1\",par1,\"2\",par2,\"R\",remainder)\n\n  if (label && label[label.length-1]!=\":\") label+=\":\";\n\n  return label+\"\\t\"+op+\"\\t\"+par1+par2+ \"\\t\" + remainder;\n}\n\nvar convert = function(txt,transTab) {\n  var lines = txt.split(\"\\n\")\n  trans = transTab\n  return lines.map(convline).join(\"\\n\")\n}\n\n\nconsole.log(convert)\nexport default {convert};\n"]}