{"version":3,"sources":["i2z.js","z2i.js","convert.js","main.js"],"names":["regZ","par","toUpperCase","regPairZ","doIndirect","transI2Z","par1","par2","module","exports","croak","m","Error","isReg","indexOf","isRegM","isRegPair","isIndirect","trim","length","register","noIndirect","substr","regPair","transZ2I","reg1","reg2","regpair1","ind1","ind2","trans","findFirstPos","line","xs","pos","i","test","apos","conv","op","lop","toLowerCase","convline","label","remainder","s","cx","convert","txt","transTab","lines","split","map","join","require","compile","source","document","editor","getValue","getElementById","value","out","addListener","element","eventName","handler","addEventListener","attachEvent"],"mappings":"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","file":"main.7e6b4314.map","sourceRoot":"..","sourcesContent":["var regZ = function(par) {\n  par = par.toUpperCase();\n  if(par==\"M\") return \"(HL)\";\n  return par\n}\n\nvar regPairZ = function(par) {\n  par = par.toUpperCase();\n  if(par==\"PSW\") return \"AF\"\n  if(par==\"B\") return \"BC\"\n  if(par==\"D\") return \"DE\"\n  if(par==\"H\") return \"HL\"\n  return par;\n}\n\nvar doIndirect = function(par) {return \"(\"+par+\")\"}\n\n\nvar transI2Z = {\n\n\n  \"mov\": function(par1,par2) {\n    return[\"LD\",regZ(par1),regZ(par2)]\n  },\n  \"mvi\": function(par1,par2) {\n    return[\"LD\",regZ(par1),par2]\n  },\n  \"ldax\": function(par1,par2) {\n    return[\"LD\",\"A\",doIndirect(regPairZ(par1))]\n  },\n  \"lda\": function(par1,par2) {\n    return[\"LD\",\"A\",doIndirect(par1)]\n  },\n  \"lhld\": function(par1,par2) {\n    return[\"LD\",\"HL\",doIndirect(par1)]\n  },\n  \"stax\": function(par1,par2) {\n    return[\"LD\",doIndirect(regPairZ(par1)),\"A\"]\n  },\n  \"sta\": function(par1,par2) {\n    return[\"LD\",doIndirect(par1),\"A\"]\n  },\n  \"shld\": function(par1,par2) {\n    return[\"LD\",doIndirect(par1),\"HL\"]\n  },\n\n  \"lxi\": function(par1,par2) {\n    return[\"LD\",regPairZ(par1),par2]\n  },\n\n  \"dad\": function(par1,par2) {\n    return[\"ADD\",\"HL\",regPairZ(par1)]\n  },\n\n\n\n  \"add\": function(par1,par2) {\n    return[\"ADD\",\"A\",regZ(par1)]\n  },\n  \"adi\": function(par1,par2) {\n    return[\"ADD\",\"A\",regZ(par1)]\n  },\n  \"sub\": function(par1,par2) {\n    return[\"SUB\",regZ(par1),\"\"]\n  },\n  \"sui\": function(par1,par2) {\n    return[\"SUB\",regZ(par1),\"\"]\n  },\n  \"sbb\": function(par1,par2) {\n    return[\"SBC\",regZ(par1),\"\"]\n  },\n  \"sbi\": function(par1,par2) {\n    return[\"SBC\",regZ(par1),\"\"]\n  },\n\n  \"inr\": function(par1,par2) {\n    return[\"INC\",regZ(par1),\"\"]\n  },\n  \"dcr\": function(par1,par2) {\n    return[\"DEC\",regZ(par1),\"\"]\n  },\n\n\n\n\n  \"push\": function(par1,par2) {\n    return[\"PUSH\",regPairZ(par1),par2]\n  },\n  \"pop\": function(par1,par2) {\n    return[\"POP\",regPairZ(par1),par2]\n  },\n  \"in\": function(par1,par2) {\n    return[\"IN\",\"A\",doIndirect(par1)]\n  },\n  \"out\": function(par1,par2) {\n    return[\"OUT\",doIndirect(par1),\"A\"]\n  },\n\n\n  \"sphl\": function(){return [\"LD\",\"SP\",\"HL\"]},\n  \"xchg\": function(){return [\"EX\",\"DE\",\"HL\"]},\n  \"xthl\": function(){return [\"EX\",\"(SP)\",\"HL\"]},\n  \"pchl\": function(){return [\"JP\",\"(HL)\",\"\"]},\n  \"cma\": function(){return [\"CPL\",\"\",\"\"]},\n  \"stc\": function(){return [\"SCF\",\"\",\"\"]},\n  \"cmc\": function(){return [\"CCF\",\"\",\"\"]},\n  \"rlc\": function(){return [\"RLCA\",\"\",\"\"]},\n  \"rrc\": function(){return [\"RRCA\",\"\",\"\"]},\n  \"ral\": function(){return [\"RLA\",\"\",\"\"]},\n  \"rar\": function(){return [\"RLA\",\"\",\"\"]}\n}\nmodule.exports = transI2Z\n","var croak = function(m) {\n  throw new Error(\"Cannot convert \"+m)\n}\n\nvar isReg = function(par) {\n  return (\"ABCDEHL\".indexOf(par.toUpperCase()))<0?false:true\n}\nvar isRegM = function(par) {\n  if(par.toUpperCase()==\"(HL)\") return true;\n  return (\"ABCDEHL\".indexOf(par.toUpperCase()))<0?false:true\n}\nvar isRegPair = function(par) {\n  return ([\"BC\",\"DE\",\"HL\",\"SP\",\"AF\"].indexOf(par.toUpperCase()))<0?false:true\n}\nvar isIndirect = function(par) {\n  par = par.trim();\n  if(par[0]!=\"(\") return false;\n  if(par[par.length-1]==\")\") return true;\n  return false;\n}\n\nvar register = function(par) {\n  par = par.toUpperCase();\n  if (!isRegM(par)) croak (\"cannot determine register \" +par)\n  if(par==\"(HL)\") return \"M\";\n  return par\n}\n\nvar noIndirect = function(par) {\n  return par.substr(1,par.length-2)\n}\n\nvar regPair = function(par) {\n  par = par.toUpperCase();\n  if (!isRegPair(par)) croak (\"cannot determine register pair \" +par)\n  if(par==\"AF\") return \"PSW\"\n  if(par==\"SP\") return \"SP\"\n  return par[0];\n}\n\n\n\nvar transZ2I = {\n  \"ex\": function(par1,par2) {\n    if ((par1.toUpperCase()==\"DE\") && (par2.toUpperCase()==\"HL\")) return [\"XCHG\",\"\",\"\"]\n    if ((par1.toUpperCase()==\"(SP)\") && (par2.toUpperCase()==\"HL\")) return [\"XTHL\",\"\",\"\"]\n    croak(\"EX \"+par1+\",\"+par2)\n  },\n  \"or\": function(par1) {\n    if(isRegM(par1)) return[\"ORA\",register(par1),\"\"]\n    return[\"ORI\",par1,\"\"]\n  },\n  \"and\": function(par1) {\n    if(isRegM(par1)) return[\"ANA\",register(par1),\"\"]\n    return[\"ANI\",par1,\"\"]\n  },\n  \"xor\": function(par1) {\n    if(isRegM(par1)) return[\"XRA\",register(par1),\"\"]\n    return[\"XRI\",par1,\"\"]\n  },\n  \"cp\": function(par1) {\n    if(isRegM(par1)) return[\"CMP\",register(par1),\"\"]\n    return[\"CPI\",par1,\"\"]\n  },\n  \"sub\": function(par1) {\n    if(isRegM(par1)) return[\"SUB\",register(par1),\"\"]\n    return[\"SUI\",par1,\"\"]\n  },\n  \"sbc\": function(par1) {\n    if(isRegM(par1)) return[\"SBB\",register(par1),\"\"]\n    return[\"SBI\",par1,\"\"]\n  },\n  \"adc\": function(par1) {\n    if(isRegM(par1)) return[\"ADC\",register(par1),\"\"]\n    return[\"ACI\",par1,\"\"]\n  },\n  \"jp\": function(par1,par2) {\n    if(!par2) return [\"JMP\",par1,\"\"]\n    if(par1==\"(HL)\") return[\"PCHL\",\"\",\"\"]\n    return[\"J\"+par1.toUpperCase(),par2,\"\"]\n  },\n  \"call\": function(par1,par2) {\n    if(!par2) return [\"CALL\",par1,\"\"]\n    return[\"C\"+par1.toUpperCase(),par2,\"\"]\n  },\n  \"ret\": function(par1,par2) {\n    if(!par1) return [\"RET\",\"\",\"\"]\n    return[\"R\"+par1.toUpperCase(),\"\",\"\"]\n  },\n  \"push\": function(par1,par2) {\n    return[\"PUSH\",regPair(par1),par2]\n  },\n  \"pop\": function(par1,par2) {\n    return[\"POP\",regPair(par1),par2]\n  },\n  \"inc\": function(par1,par2) {\n    if(isRegPair(par1))return[\"INX\",regPair(par1),par2]\n    if(isRegM(par1)) return[\"INR\",register(par1),\"\"]\n    croak(\"inc\")\n  },\n  \"dec\": function(par1,par2) {\n    if(isRegPair(par1))return[\"DCX\",regPair(par1),par2]\n    if(isRegM(par1)) return[\"DCR\",register(par1),\"\"]\n    croak(\"inc\")\n  },\n  \"in\": function(par1,par2) {\n    return[\"IN\",noIndirect(par2),\"\"]\n  },\n  \"out\": function(par1,par2) {\n    return[\"OUT\",noIndirect(par1),\"\"]\n  },\n  \"add\": function(par1,par2) {\n    var reg1 = isRegM(par1);\n    var reg2 = isRegM(par2);\n    var regpair1 = isRegPair(par1);\n    var ind1 = isIndirect(par1);\n    var ind2 = isIndirect(par2);\n    if (regpair1) return [\"DAD\",regPair(par2),\"\"]\n    if (reg1 && reg2) return [\"ADD\",register(par1),register(par2)]\n    if (reg1 && !reg2) return [\"ADI\",register(par1),par2]\n    croak(\"add \"+par1+\",\"+par2)\n  },\n  \"ld\": function(par1,par2) {\n    var reg1 = isRegM(par1);\n    var reg2 = isRegM(par2);\n    var regpair1 = isRegPair(par1);\n    var ind1 = isIndirect(par1);\n    var ind2 = isIndirect(par2);\n    if (par1==\"SP\" && par2==\"HL\") return [\"SPHL\",\"\",\"\"]\n    if (reg1 && reg2) return [\"MOV\",register(par1),register(par2)]\n    if (reg1 && !reg2 && ind2 && par2==\"(BC)\") return [\"LDAX\",\"B\",\"\"]\n    if (reg1 && !reg2 && ind2 && par2==\"(DE)\") return [\"LDAX\",\"D\",\"\"]\n    if (reg1 && !reg2 && ind2) return [\"LDA\",noIndirect(par2),\"\"]\n    if (!reg1 && reg2 && ind1 && par1==\"(BC)\") return [\"STAX\",\"B\",\"\"]\n    if (!reg1 && reg2 && ind1 && par1==\"(DE)\") return [\"STAX\",\"D\",\"\"]\n    if (!reg1 && ind1 && reg2) return [\"STA\",noIndirect(par1),\"\"]\n    if (reg1 && !reg2 && !regpair1) return [\"MVI\",register(par1),par2]\n    if (regpair1) return [\"LXI\",regPair(par1),par2]\n    croak(\"ld \"+par1+\",\"+par2)\n  },\n  \"cpl\": function(){return [\"CMA\",\"\",\"\"]},\n  \"scf\": function(){return [\"STC\",\"\",\"\"]},\n  \"ccf\": function(){return [\"CMC\",\"\",\"\"]},\n  \"rlca\": function(){return [\"RLC\",\"\",\"\"]},\n  \"rrca\": function(){return [\"RRC\",\"\",\"\"]},\n  \"rla\": function(){return [\"RAL\",\"\",\"\"]},\n  \"rra\": function(){return [\"RAR\",\"\",\"\"]}\n}\nmodule.exports = transZ2I;\n","\nvar findFirstPos = function(line,xs) {\n  var pos = -1;\n  for (var i=0;i<xs.length;i++) {\n    var test = xs[i]\n    var apos = line.indexOf(test);\n    if (apos<0) continue;\n    if (pos==-1) pos = apos;\n    if (apos<pos) pos = apos;\n  }\n  return pos;\n}\nvar trans;\nvar croak = function(m) {\n  throw new Error(\"Cannot convert \"+m)\n}\n\n\n\nvar conv = function(op,par1,par2) {\n\n  var lop = op.toLowerCase();\n  if (trans[lop]) {\n    return trans[lop](par1.trim(),par2.trim())\n  }\n\n  return[op,par1,par2];\n}\n\nvar convline = function(line) {\n  //parse line\n  var label=\"\", op=\"\", par1=\"\",par2=\"\",remainder=\"\";\n  var s;\n  if (line[0]!=\" \") {\n    if (line[0]==\";\") return line; //whole line is a remark\n    //label?\n    s = findFirstPos(line,[\" \",\":\",\"\\t\"])\n    label = line.substr(0,s).trim();\n    line = line.substr(s+1);\n  }\n  line = line.trim();\n  s = findFirstPos(line,[\" \",\":\",\"\\t\"])\n  op = line.substr(0,s);\n  line = line.substr(s+1).trim();\n\n  s = findFirstPos(line,[\",\",\";\"])\n  if(line[s]==\",\") {\n    //2 params\n    par1 = line.substr(0,s);\n    line = line.substr(s+1).trim();\n    s = findFirstPos(line,[\";\"])\n    if (s<0) {\n      par2 = line;\n      line=\"\";\n    } else {\n      par2 = line.substr(0,s);\n      line = line.substr(s+1).trim();\n    }\n  } else if(line[s]==\";\") {\n    //1 param\n    par1 = line.substr(0,s);\n    line = line.substr(s+1).trim();\n    par2=\"\";\n  } else if(s<0) {\n    //1 param, no remark\n    if (!op) {\n      op = line\n      par1=\"\"\n    } else {\n      par1 = line\n    }\n    par2=\"\";\n    line=\"\"\n  }\n\n  remainder = line\n // console.log(\"L\",label,\"O\",op,\"1\",par1,\"2\",par2,\"R\",remainder)\n  var cx = conv(op,par1,par2);\n  op = cx[0]\n  par1 = cx[1].trim()\n  par2 = cx[2].trim();\n\n\n  //hex fix\n  if (par1[0]==\"#\") par1 = \"$\"+par1.substr(1);\n  if (par2[0]==\"#\") par2 = \"$\"+par2.substr(1);\n  if (par2) par2 = \",\"+par2;\n\n  //console.log(\"L\",label,\"O\",op,\"1\",par1,\"2\",par2,\"R\",remainder)\n\n  if (label && label[label.length-1]!=\":\") label+=\":\";\n\n  return label+\"\\t\"+op+\"\\t\"+par1+par2+ \"\\t\" + remainder;\n}\n\nvar convert = function(txt,transTab) {\n  var lines = txt.split(\"\\n\")\n  trans = transTab\n  return lines.map(convline).join(\"\\n\")\n}\n\nmodule.exports = convert\n//console.log(convert)\n//export default {convert};\n","var transI2Z = require(\"./i2z.js\")\nvar transZ2I = require(\"./z2i.js\")\n//import convert from \"./convert\"\nvar convert = require(\"./convert.js\")\n\nvar compile = function(){\n    var source\n\n//console.log(convert)\n\n    //= document.getElementById(\"source\").value\n//console.log(transI2Z)\n\n    source = editor.getValue()\n\n\n    //source +=\"\\nEND\\n\"\n    //var ENGINE = \"OMENALPHA\"\n    //var ENGINE = \"OMENCHARLIE\"\n\n    var trans;\n\n    switch (document.getElementById(\"model\").value) {\n      case \"z2i\": trans = transZ2I; break\n      case \"i2z\": trans = transI2Z; break\n    }\n\n    var out = convert(source,trans)\n\n\n    //console.log(out)\n\n    document.getElementById(\"output\").value = (out)\n}\ncompile()\n\n\n\nfunction addListener(element, eventName, handler) {\n  if (element.addEventListener) {\n    element.addEventListener(eventName, handler, false);\n  }\n  else if (element.attachEvent) {\n    element.attachEvent('on' + eventName, handler);\n  }\n  else {\n    element['on' + eventName] = handler;\n  }\n}\naddListener(document.getElementById('conv'), 'click', compile);\n"]}